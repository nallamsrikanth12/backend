pipeline {
    agent {
        label 'Agent-1'
    }
    options {
        // Timeout counter starts BEFORE agent is allocated
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    environment {
        APP_VERSION = '' // Use an environment variable
    }
    parameters {
        choice(name: 'CHOICE', choices: ['apply', 'destroy'], description: 'Pick something')
    }

    stages {
        stage('Read JSON') { // Add a name to the stage
            when {
                expression {
                    return params.CHOICE == 'apply'
                }
            }
            steps {
                script {
                    def packagejson = readJSON file: 'package.json'
                    APP_VERSION = packagejson.version
                    echo "application version is ${APP_VERSION}"
                }
            }
        }
        stage('npm install') {
            input {
                message "Should we continue?"
                ok "Yes, we should."
            }
            steps {
                sh """
                ls -ltr
                npm install
                echo "application version is ${APP_VERSION}"
                """
            }
        }
        stage('Build') {
            steps {
                sh """
                zip -q -r backend-${APP_VERSION}.zip * -x jenkinsfiles -x backend-${APP_VERSION}.zip
                ls -ltr
                """
            }
        }
    }
    post {
        always {
            echo 'I will run always'
        }
        success {
            echo 'I will run when pipeline is success'
        }
        failure {
            echo 'I will run when the pipeline fails'
        }
    }
}
