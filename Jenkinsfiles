pipeline {
    agent {
        label 'Agent-1'
    }
    options {
        // Timeout counter starts BEFORE agent is allocated
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    environment {
        def appversion = ''
    }

    stages{
        stage{
            steps{
                script{
                    def packagejson = readJSON file: 'package.json'
                    appversion = packagejson.version
                    echo "application version is $appversion"
                }
            }
        }
        stage('npm install'){
            steps {
                sh """
                ls -ltr
                npm install
                 echo "application version is $appversion"

                """
            }
        }
        stage('npm install'){
            steps {
                sh """
                zip -q -r backend-${appversion}.zip * -x jenkinsfiles -x  backend-${appversion}.zip
                ls -ltr

                """
            }
        }

    }
    post {
        always {
            echo 'i will run always'
        }
        success {
            echo 'i will run  when pipeline is success'
        }
        failure {
            echo 'i will run the pipeline is failure '
        }
    }      
    
}