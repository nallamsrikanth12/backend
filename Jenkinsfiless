pipeline {
    agent {
        label 'Agent-1'
    }
    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    environment {
        def appversion = ''
       
    }
    stages {
        stage('read the json file') { 
            steps {
                script {
                    def packagejson = readJSON file: 'package.json'
                    appversion = packagejson.version
                    echo "application is ${appversion}"
                }
                
            }
        }
        stage('npm install') { 
            steps {
                sh """
                 npm install
                 ls -ltr
                 echo "application is ${appversion}"
                """
            }
        }


        stage('build') { 
            steps {
                sh """
                 zip -q -r backend-${appversion}.zip * -x jenkinsfiless -x backend-${appversion}.zip
                 ls -ltr
                 echo "application is ${appversion}"
                """
            }
        }
        
    }
    post {
        always {
            echo 'i will run always'
            deleteDir()

        }
        success {
            echo 'i will run pipeline is success'
        }
        failure {
            echo  'i will run pipeline is failure'
        }
    }
}